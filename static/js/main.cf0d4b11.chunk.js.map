{"version":3,"sources":["components/Cockpit/Cockpit.module.css","components/BookCard/BookCard.js","components/Cockpit/Cockpit.js","App.js","serviceWorker.js","index.js","components/BookCard/BookCard.module.css","App.module.css"],"names":["module","exports","Cockpit","bookCard","props","react_default","a","createElement","GridColumn","className","classes","Book","Img","src","imageUrl","alt","Info","Card","Content","Header","title","Meta","author","Description","publisher","href","link","target","rel","cockpit","Input","icon","Icon","name","circular","onClick","onButtonClick","size","type","placeholder","value","inputText","onChange","onInputChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bookCards","searchQuery","error","errorMessage","loading","buttonClickedHandler","setState","console","log","finalUrl","concat","axios","get","then","response","booksToSetState","dataRefinement","data","items","catch","status","request","message","arr","forEach","book","volumeInfo","hasOwnProperty","imageLinks","thumbnail","authors","inputChangedHandler","bind","assertThisInitialized","event","books","map","BookCard","toLowerCase","infoLink","key","id","Grid","stackable","columns","Container","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf0d4b11.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cockpit\":\"Cockpit_Cockpit__33rHs\"};","import React from 'react';\nimport classes from './BookCard.module.css';\nimport { Card, GridColumn } from 'semantic-ui-react';\n\nconst bookCard = (props) => {\n    // let assignedClasses = [];\n    // assignedClasses.push(classes.BookCard, classes.Capitalize);\n\n    return (\n        <GridColumn>\n                <div className={classes.Book}>\n                    <div className={classes.Img}>\n                        <img src={props.imageUrl} alt=''/>\n                    </div>\n                    <div className={classes.Info}>\n                        <Card.Content>\n                            <Card.Header>{props.title}</Card.Header>\n                            <Card.Meta>By: {props.author}</Card.Meta>\n                            <Card.Description>Published by: {props.publisher}</Card.Description>\n                        </Card.Content>\n                        <a href={props.link} target='_blank' rel=\"noopener noreferrer\">\n                            <button>See this Book</button>\n                        </a>\n                    </div>\n                </div>\n        </GridColumn>\n        \n    );\n}\n\nexport default bookCard;","import React from 'react';\nimport {Input, Icon} from 'semantic-ui-react';\nimport classes from './Cockpit.module.css';\n\nconst cockpit = (props) =>{\n    // let textInput = useRef();\n    // useEffect(() => textInput.current.focus(), []);\n    return(\n        <div className={classes.Cockpit}>\n            <h2>BookSearch</h2>\n            <Input \n                icon={\n                    <Icon name='search' circular link \n                    onClick={props.onButtonClick}\n                    />}\n                size='big'   \n                type='text' \n                placeholder='Search books here..'\n                value={props.inputText}\n                onChange={props.onInputChange}\n            />\n        </div>\n    );\n}\n\nexport default cockpit;","import React, { Component } from 'react';\nimport classes from './App.module.css';\nimport axios from 'axios';\nimport BookCard from './components/BookCard/BookCard';\nimport Cockpit from './components/Cockpit/Cockpit';\nimport { Icon, Grid } from 'semantic-ui-react';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    //example of writing as methods, not properties of this class. The rest is properties.\n    this.inputChangedHandler = this.inputChangedHandler.bind(this);\n  }\n  state = {\n    bookCards: [],\n    searchQuery: '',\n    error: false,\n    errorMessage: '',\n    loading: false\n  };\n  \n  inputChangedHandler(event) {\n    this.setState({searchQuery: event.target.value, error:false });\n  }\n\n  buttonClickedHandler = () => {\n    this.setState({loading:true});\n    console.log('button clicked');\n    const key = 'AIzaSyCLyYTiU5ho4IHCfNY7X0AIYoqKUKUc3Tk';\n    const url = 'https://www.googleapis.com/books/v1/volumes?q=';\n    const finalUrl = `${url+this.state.searchQuery}&key=${key}&maxResults=40&orderBy=relevance`;\n    \n    axios.get(finalUrl)\n      .then(response => {\n        const booksToSetState = this.dataRefinement(response.data.items);\n        this.setState({bookCards: booksToSetState, loading:false});\n        console.log(\"booksToSetState: after dataRefinement call\");\n        console.log(this.state.bookCards);\n      }\n     )\n     .catch(error => {\n       if(error.response){\n         this.setState({ error: true, errorMessage: error.response.status });\n       }else if(error.request){\n         this.setState({ error: true, errorMessage: error.request });\n       }else{\n         console.log('Something happened in setting up the request that triggered an Error');\n         this.setState({ error: true, errorMessage: error.message  });\n       }\n     });\n  }\n  \n  dataRefinement = (arr) =>Â {\n    console.log('from dataRefinement method..');\n    arr.forEach(book => {\n      if(!book.volumeInfo.hasOwnProperty('imageLinks')){\n        book.volumeInfo.imageLinks = { thumbnail: 'https://books.google.pl/googlebooks/images/no_cover_thumb.gif'};\n        //book.volumeInfo.imageLinks.thumbnail = \n        console.log(book);\n      }\n      if (!book.volumeInfo.hasOwnProperty('publisher')){\n        book.volumeInfo.publisher = 'Unknown';\n      }\n      if(!book.volumeInfo.hasOwnProperty('title')){\n        book.volumeInfo.title = 'Unknown';\n      }\n      if (!book.volumeInfo.hasOwnProperty('authors')) {\n        book.volumeInfo.authors = 'Unknown';\n      }\n    });\n    console.log('All books have imageLinks property now.. ');\n    return arr;\n  }\n\n  render() {\n    let books = \n        <div>\n          <p>Something went wrong! Error code:</p>\n          <p>{this.state.errorMessage}</p>\n        </div>\n    \n    if(!this.state.error){\n      books = this.state.bookCards.map(book => {\n        return <BookCard\n          title={book.volumeInfo.title.toLowerCase()}\n          author={book.volumeInfo.authors}\n          publisher={book.volumeInfo.publisher}\n          imageUrl={book.volumeInfo.imageLinks.thumbnail}\n          link={book.volumeInfo.infoLink}\n          key={book.id}\n        />;\n      });\n    }\n\n    const isLoading = this.state.loading;\n    let icon;\n\n    if(isLoading){\n      icon = <Icon loading name='spinner' size='big' />\n    }\n  \n    return (\n      <div className={classes.App}>\n      <Cockpit \n        inputText={this.state.searchQuery}\n        onInputChange={this.inputChangedHandler}\n        onButtonClick={this.buttonClickedHandler}\n      />\n      {console.log(this.state.loading)}\n      {icon}\n      <Grid stackable columns={2} className={classes.Container}>\n        {books}\n      </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Book\":\"BookCard_Book__2niyr\",\"Img\":\"BookCard_Img__tOHiH\",\"Info\":\"BookCard_Info__JKSvr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__SoZ31\",\"Container\":\"App_Container__1X515\"};"],"sourceRoot":""}