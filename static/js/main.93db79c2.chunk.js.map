{"version":3,"sources":["components/Cockpit/Cockpit.module.css","components/BookCard/BookCard.js","components/Cockpit/Cockpit.js","App.js","serviceWorker.js","index.js","components/BookCard/BookCard.module.css","App.module.css"],"names":["module","exports","bookCard","props","GridColumn","className","classes","Book","Img","src","imageUrl","alt","Info","Card","Content","Header","title","Meta","author","Description","publisher","href","link","target","rel","cockpit","Cockpit","Input","icon","Icon","name","circular","onClick","onButtonClick","size","type","placeholder","value","inputText","onChange","onInputChange","App","state","bookCards","searchQuery","error","errorMessage","loading","inputChangedHandler","event","setState","buttonClickedHandler","url","axios","get","then","response","booksToSetState","dataRefinement","data","message","items","catch","arr","forEach","book","volumeInfo","hasOwnProperty","imageLinks","thumbnail","authors","books","this","map","BookCard","toLowerCase","infoLink","key","id","Grid","stackable","columns","Container","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,QAAU,2B,4PCyBbC,EAtBE,SAACC,GAChB,OACE,kBAACC,EAAA,EAAD,KACE,yBAAKC,UAAWC,IAAQC,MACtB,yBAAKF,UAAWC,IAAQE,KACtB,yBAAKC,IAAKN,EAAMO,SAAUC,IAAI,MAEhC,yBAAKN,UAAWC,IAAQM,MACtB,kBAACC,EAAA,EAAKC,QAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KAAcZ,EAAMa,OACpB,kBAACH,EAAA,EAAKI,KAAN,YAAgBd,EAAMe,QACtB,kBAACL,EAAA,EAAKM,YAAN,sBAAiChB,EAAMiB,YAEzC,uBAAGC,KAAMlB,EAAMmB,KAAMC,OAAO,SAASC,IAAI,uBACvC,sD,mCCIGC,EAlBC,SAACtB,GACf,OACE,yBAAKE,UAAWC,IAAQoB,SACtB,0CACA,kBAACC,EAAA,EAAD,CACEC,KACE,kBAACC,EAAA,EAAD,CAAMC,KAAK,SAASC,UAAQ,EAACT,MAAI,EAACU,QAAS7B,EAAM8B,gBAEnDC,KAAK,MACLC,KAAK,OACLC,YAAY,sBACZC,MAAOlC,EAAMmC,UACbC,SAAUpC,EAAMqC,kB,SC6FTC,E,4MArGbC,MAAQ,CACNC,UAAW,GACXC,YAAa,GACbC,OAAO,EACPC,aAAc,GACdC,SAAS,G,EAGXC,oBAAsB,SAACC,GACrB,EAAKC,SAAS,CAAEN,YAAaK,EAAM1B,OAAOc,MAAOQ,OAAO,K,EAG1DM,qBAAuB,WACrB,EAAKD,SAAS,CAAEH,SAAS,IACzB,IAAMK,EAAG,mFAA+E,EAAKV,MAAME,aACnGS,IACGC,IAAIF,GACJG,MAAK,SAACC,GACL,IAAMC,EAAkB,EAAKC,eAC3BF,EAASG,KAAKC,QAAQC,OAExB,EAAKX,SAAS,CACZP,UAAWc,EACXV,SAAS,OAGZe,OAAM,SAACjB,GACN,EAAKK,SAAS,CACZL,OAAO,EACPC,aAAcD,EAAMe,c,EAK5BF,eAAiB,SAACK,GAkBhB,OAjBAA,EAAIC,SAAQ,SAACC,GACNA,EAAKC,WAAWC,eAAe,gBAClCF,EAAKC,WAAWE,WAAa,CAC3BC,UACE,kEAGDJ,EAAKC,WAAWC,eAAe,eAClCF,EAAKC,WAAW9C,UAAY,WAEzB6C,EAAKC,WAAWC,eAAe,WAClCF,EAAKC,WAAWlD,MAAQ,WAErBiD,EAAKC,WAAWC,eAAe,aAClCF,EAAKC,WAAWI,QAAU,cAGvBP,G,uDAIP,IAuBInC,EAvBA2C,EACF,6BACE,gEACA,2BAAIC,KAAK9B,MAAMI,eA0BnB,OAtBK0B,KAAK9B,MAAMG,QACd0B,EAAQC,KAAK9B,MAAMC,UAAU8B,KAAI,SAACR,GAChC,OACE,kBAACS,EAAD,CACE1D,MAAOiD,EAAKC,WAAWlD,MAAM2D,cAC7BzD,OAAQ+C,EAAKC,WAAWI,QACxBlD,UAAW6C,EAAKC,WAAW9C,UAC3BV,SAAUuD,EAAKC,WAAWE,WAAWC,UACrC/C,KAAM2C,EAAKC,WAAWU,SACtBC,IAAKZ,EAAKa,SAMAN,KAAK9B,MAAMK,UAI3BnB,EAAO,kBAACC,EAAA,EAAD,CAAMkB,SAAO,EAACjB,KAAK,UAAUI,KAAK,SAIzC,yBAAK7B,UAAWC,IAAQmC,KACtB,kBAACf,EAAD,CACEY,UAAWkC,KAAK9B,MAAME,YACtBJ,cAAegC,KAAKxB,oBACpBf,cAAeuC,KAAKrB,uBAErBvB,EACD,kBAACmD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAG5E,UAAWC,IAAQ4E,WAC5CX,Q,GA/FOY,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,MAAK,SAAAyC,GACjCA,EAAaC,iB,mBElInBjG,EAAOC,QAAU,CAAC,KAAO,uBAAuB,IAAM,sBAAsB,KAAO,yB,mBCAnFD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,UAAY,0B","file":"static/js/main.93db79c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cockpit\":\"Cockpit_Cockpit__1UCa3\"};","import React from \"react\";\r\nimport classes from \"./BookCard.module.css\";\r\nimport { Card, GridColumn } from \"semantic-ui-react\";\r\n\r\nconst bookCard = (props) => {\r\n  return (\r\n    <GridColumn>\r\n      <div className={classes.Book}>\r\n        <div className={classes.Img}>\r\n          <img src={props.imageUrl} alt=\"\" />\r\n        </div>\r\n        <div className={classes.Info}>\r\n          <Card.Content>\r\n            <Card.Header>{props.title}</Card.Header>\r\n            <Card.Meta>By: {props.author}</Card.Meta>\r\n            <Card.Description>Published by: {props.publisher}</Card.Description>\r\n          </Card.Content>\r\n          <a href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <button>See this Book</button>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </GridColumn>\r\n  );\r\n};\r\n\r\nexport default bookCard;\r\n","import React from \"react\";\r\nimport { Input, Icon } from \"semantic-ui-react\";\r\nimport classes from \"./Cockpit.module.css\";\r\n\r\nconst cockpit = (props) => {\r\n  return (\r\n    <div className={classes.Cockpit}>\r\n      <h2>BookSearch</h2>\r\n      <Input\r\n        icon={\r\n          <Icon name=\"search\" circular link onClick={props.onButtonClick} />\r\n        }\r\n        size=\"big\"\r\n        type=\"text\"\r\n        placeholder=\"Search books here..\"\r\n        value={props.inputText}\r\n        onChange={props.onInputChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default cockpit;\r\n","import React, { Component } from \"react\";\r\nimport classes from \"./App.module.css\";\r\nimport axios from \"axios\";\r\nimport BookCard from \"./components/BookCard/BookCard\";\r\nimport Cockpit from \"./components/Cockpit/Cockpit\";\r\nimport { Icon, Grid } from \"semantic-ui-react\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    bookCards: [],\r\n    searchQuery: \"\",\r\n    error: false,\r\n    errorMessage: \"\",\r\n    loading: false,\r\n  };\r\n\r\n  inputChangedHandler = (event) => {\r\n    this.setState({ searchQuery: event.target.value, error: false });\r\n  };\r\n\r\n  buttonClickedHandler = () => {\r\n    this.setState({ loading: true });\r\n    const url = `https://us-central1-fir-booksearch.cloudfunctions.net/search?searchQuery=${this.state.searchQuery}`;\r\n    axios\r\n      .get(url)\r\n      .then((response) => {\r\n        const booksToSetState = this.dataRefinement(\r\n          response.data.message.items\r\n        );\r\n        this.setState({\r\n          bookCards: booksToSetState,\r\n          loading: false,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          error: true,\r\n          errorMessage: error.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  dataRefinement = (arr) => {\r\n    arr.forEach((book) => {\r\n      if (!book.volumeInfo.hasOwnProperty(\"imageLinks\")) {\r\n        book.volumeInfo.imageLinks = {\r\n          thumbnail:\r\n            \"https://books.google.pl/googlebooks/images/no_cover_thumb.gif\",\r\n        };\r\n      }\r\n      if (!book.volumeInfo.hasOwnProperty(\"publisher\")) {\r\n        book.volumeInfo.publisher = \"Unknown\";\r\n      }\r\n      if (!book.volumeInfo.hasOwnProperty(\"title\")) {\r\n        book.volumeInfo.title = \"Unknown\";\r\n      }\r\n      if (!book.volumeInfo.hasOwnProperty(\"authors\")) {\r\n        book.volumeInfo.authors = \"Unknown\";\r\n      }\r\n    });\r\n    return arr;\r\n  };\r\n\r\n  render() {\r\n    let books = (\r\n      <div>\r\n        <p>Something went wrong! Error code:</p>\r\n        <p>{this.state.errorMessage}</p>\r\n      </div>\r\n    );\r\n\r\n    if (!this.state.error) {\r\n      books = this.state.bookCards.map((book) => {\r\n        return (\r\n          <BookCard\r\n            title={book.volumeInfo.title.toLowerCase()}\r\n            author={book.volumeInfo.authors}\r\n            publisher={book.volumeInfo.publisher}\r\n            imageUrl={book.volumeInfo.imageLinks.thumbnail}\r\n            link={book.volumeInfo.infoLink}\r\n            key={book.id}\r\n          />\r\n        );\r\n      });\r\n    }\r\n\r\n    const isLoading = this.state.loading;\r\n    let icon;\r\n\r\n    if (isLoading) {\r\n      icon = <Icon loading name=\"spinner\" size=\"big\" />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.App}>\r\n        <Cockpit\r\n          inputText={this.state.searchQuery}\r\n          onInputChange={this.inputChangedHandler}\r\n          onButtonClick={this.buttonClickedHandler}\r\n        />\r\n        {icon}\r\n        <Grid stackable columns={2} className={classes.Container}>\r\n          {books}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Book\":\"BookCard_Book__38MIb\",\"Img\":\"BookCard_Img__2Oaoc\",\"Info\":\"BookCard_Info__zrki5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__Mu9Qh\",\"Container\":\"App_Container__JpzX8\"};"],"sourceRoot":""}