{"version":3,"sources":["App.module.css","components/BookCard/BookCard.module.css","components/BookCard/BookCard.js","components/Cockpit/Cockpit.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","BookCard","bookCard","props","react_default","a","createElement","className","classes","src","imageUrl","alt","title","author","publisher","href","link","cockpit","type","placeholder","value","inputText","onChange","onInputChange","onClick","onButtonClick","state","bookCards","searchQuery","error","errorMessage","inputChangedHandler","event","_this","setState","target","buttonClickedHandler","console","log","finalUrl","concat","axios","get","then","response","data","items","booksToSetState","Object","objectSpread","dataRefinement","catch","status","request","message","arr","forEach","book","volumeInfo","hasOwnProperty","imageLinks","thumbnail","books","style","textAlign","this","map","authors","key","id","Cockpit","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.63f12d0e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__SoZ31\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BookCard\":\"BookCard_BookCard__3Ski1\"};","import React from 'react';\nimport classes from './BookCard.module.css';\n\nconst bookCard = (props) => {\n    return (\n        <div className={classes.BookCard}>\n            <img src={props.imageUrl} alt=''></img>\n            <div>\n                <h2>{props.title}</h2>\n                <p>By: {props.author}</p>\n                <p>Published by: {props.publisher}</p>\n                <a href = {props.link}>\n                    <button>See this Book</button>\n                </a>\n            </div>\n        </div>\n    );\n}\n\nexport default bookCard;","import React, {useEffect, useRef} from 'react';\n\nconst cockpit = (props) =>{\n    // let textInput = useRef();\n    // useEffect(() => textInput.current.focus(), []);\n    return(\n        <div>\n            <h2>BookSearch</h2>\n            <input \n                type='text' \n                placeholder='Search by name or author'\n                value={props.inputText}\n                onChange={props.onInputChange}\n            />\n            <button\n            onClick={props.onButtonClick}>Search</button>\n        </div>\n    );\n}\n\nexport default cockpit;","import React, { Component } from 'react';\nimport classes from './App.module.css';\nimport axios from 'axios';\nimport BookCard from './components/BookCard/BookCard';\nimport Cockpit from './components/Cockpit/Cockpit';\n\nclass App extends Component {\n  state = {\n    bookCards: [],\n    searchQuery: '',\n    error: false,\n    errorMessage: ''\n  };\n  \n  inputChangedHandler = (event) => {\n    this.setState({searchQuery: event.target.value, error:false })\n  }\n\n  buttonClickedHandler = () =>{\n    console.log('button clicked');\n    const key = 'AIzaSyCLyYTiU5ho4IHCfNY7X0AIYoqKUKUc3Tk';\n    const url = 'https://www.googleapis.com/books/v1/volumes?q='\n    const finalUrl = `${url+this.state.searchQuery}&key=${key}&maxResults=40&orderBy=relevance`;\n    \n    axios.get(finalUrl)\n      .then(response => {\n        this.setState({ bookCards: response.data.items });\n        console.log(\"this.state.bookCards from axios.get\");\n        console.log(this.state.bookCards);\n        let booksToSetState = {...this.state.bookCards}\n        booksToSetState = this.dataRefinement(response.data.items);\n        this.setState({bookCards: booksToSetState})\n        console.log(\"booksToSetState: after dataRefinement call\");\n        console.log(this.state.bookCards);\n      }\n     )\n     .catch(error => {\n       if(error.response){\n         this.setState({ error: true, errorMessage: error.response.status });\n       }else if(error.request){\n         this.setState({ error: true, errorMessage: error.request });\n       }else{\n         console.log('Something happened in setting up the request that triggered an Error');\n         this.setState({ error: true, errorMessage: error.message  });\n       }\n     });\n  }\n  \n  dataRefinement = (arr) =>Â {\n    console.log('from dataRefinement method..');\n    arr.forEach(book => {\n      if(!book.volumeInfo.hasOwnProperty('imageLinks')){\n        book.volumeInfo.imageLinks = { };\n        book.volumeInfo.imageLinks.thumbnail = 'https://image.freepik.com/free-vector/books-stack-realistic_1284-4735.jpg'\n        console.log(book);\n      }else{\n        console.log('All books have imageLinks property, arr not touched.. ')\n      }\n    });\n    return arr;\n  }\n\n  render() {\n    let books = \n        <div style={{textAlign: 'center'}}>\n        <p>Something went wrong! Error code:</p>\n        <p>{this.state.errorMessage}</p>\n        </div>\n    \n    if(!this.state.error){\n      books = this.state.bookCards.map(book => {\n        return <BookCard\n          title={book.volumeInfo.title}\n          author={book.volumeInfo.authors}\n          publisher={book.volumeInfo.publisher}\n          imageUrl={book.volumeInfo.imageLinks.thumbnail}\n          //\"https://image.freepik.com/free-vector/books-stack-realistic_1284-4735.jpg\"\n          key={book.id}\n        />;\n      });\n    }\n  \n    return (\n      <div className={classes.App}>\n      <Cockpit \n        inputText={this.state.searchQuery}\n        onInputChange={this.inputChangedHandler}\n        onButtonClick={this.buttonClickedHandler}\n      />\n      {books}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}